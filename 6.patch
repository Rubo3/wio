From: Leonid Bobrov <goleo@disroot.org>
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=disroot.org; s=mail;
	t=1592466142; bh=ouvB/8wNUw+bBKbEbwReV4R/1qXMrriEHVFWU5YCLgY=;
	h=From:To:Cc:Subject:Date:In-Reply-To:References;
	b=Ov7v9zX+midZ5DZrQQk0N2wypoxY2tFhcmxeDXpcjf84uJ6lfSphr+euUCT/t60IG
	 4p1huoBrSoCMkl+ROMCE+c/oHcHAQYJPh+83mXXpA1SpeeniZ0XtO+4zutT+nChRZl
	 YK6FOF1pbsuFAFhovjQk7y2xxunA4AQuUaCUlmJsityhyuowIFo9KR9olhrd9nWN5U
	 Wi5bftr2je7EEByCpzPX95E+XqdnJzt5gIyMRyKHh4V0O8S2SP3yj53fTf2mHf6ueQ
	 3GoDX04o8zd7q4ZSQhgaJd5uYLSLFHfA/RsC8qSLlH+W9ql8oMe+NjgORWuz7WmjUO
	 2fNiye0xdSXwQ==
To: ~sircmpwn/wio@lists.sr.ht,
	Leon Plickat <leonhenrik.plickat@stud.uni-goetttingen.de>
Cc: Leonid Bobrov <goleo@disroot.org>
Subject: [PATCH 06/11] Left and middle mouse buttons stop current action / event
Date: Thu, 18 Jun 2020 10:39:49 +0300
Message-Id: <20200618073954.189606-7-goleo@disroot.org>
In-Reply-To: <20200618073954.189606-1-goleo@disroot.org>
References: <20200618073954.189606-1-goleo@disroot.org>
Mime-Version: 1.0
Content-Transfer-Encoding: quoted-printable

Also revert 8ecffded9bf606e80ce8b2ad3d2ed929aea4f374
---
 input.c | 103 +++++++++++++++++++++++---------------------------------
 1 file changed, 43 insertions(+), 60 deletions(-)

diff --git a/input.c b/input.c
index bd4389a..8e79f0e 100644
--- a/input.c
+++ b/input.c
@@ -30,7 +30,6 @@ static void keyboard_handle_modifiers(
 		&keyboard->device->keyboard->modifiers);
 }
=20
-static void view_end_interactive(struct wio_server *server);
 static void keyboard_handle_key(
 		struct wl_listener *listener, void *data) {
 	struct wio_keyboard *keyboard =3D
@@ -38,25 +37,6 @@ static void keyboard_handle_key(
 	struct wio_server *server =3D keyboard->server;
 	struct wlr_event_keyboard_key *event =3D data;
 	struct wlr_seat *seat =3D server->seat;
-	xkb_keycode_t keycode =3D event->keycode + 8;
-	const xkb_keysym_t *syms;
-	int nsyms =3D xkb_state_key_get_syms(
-		keyboard->device->keyboard->xkb_state,
-		keycode, &syms);
-
-	for (int i =3D 0; i < nsyms; i++) {
-		if (syms[i] =3D=3D XKB_KEY_Escape) {
-			switch (server->input_state) {
-			case INPUT_STATE_NONE:
-			case INPUT_STATE_MENU:
-				break;
-			default:
-				view_end_interactive(server);
-				return;
-			}
-		}
-	}
-
 	wlr_seat_set_keyboard(seat, keyboard->device);
 	wlr_seat_keyboard_notify_key(seat, event->time_msec,
 		event->keycode, event->state);
@@ -312,9 +292,12 @@ static void handle_button_internal(
 	struct wlr_box box;
 	int x1, x2, y1, y2;
 	uint32_t width, height;
+	double sx, sy;
+	struct wlr_surface *surface =3D NULL;
+	struct wio_view *view;
 	switch (server->input_state) {
 	case INPUT_STATE_NONE:
-		if (event->state =3D=3D WLR_BUTTON_PRESSED && event->button =3D=3D BTN=
_RIGHT) {
+		if (event->state =3D=3D WLR_BUTTON_PRESSED) {
 			// TODO: Open over the last-used menu item
 			server->input_state =3D INPUT_STATE_MENU;
 			server->menu.x =3D server->cursor->x;
@@ -333,36 +316,36 @@ static void handle_button_internal(
 		}
 		break;
 	case INPUT_STATE_NEW_START:
-		if (event->state =3D=3D WLR_BUTTON_PRESSED) {
-			server->interactive.sx =3D server->cursor->x;
-			server->interactive.sy =3D server->cursor->y;
-			server->input_state =3D INPUT_STATE_NEW_END;
+		if (event->state !=3D WLR_BUTTON_PRESSED) {
+			break;
 		}
+		server->interactive.sx =3D server->cursor->x;
+		server->interactive.sy =3D server->cursor->y;
+		server->input_state =3D INPUT_STATE_NEW_END;
 		break;
 	case INPUT_STATE_NEW_END:
 		new_view(server);
 		view_end_interactive(server);
 		break;
 	case INPUT_STATE_RESIZE_SELECT:
-		if (event->state =3D=3D WLR_BUTTON_PRESSED) {
-			double sx, sy;
-			struct wlr_surface *surface =3D NULL;
-			struct wio_view *view =3D wio_view_at(server,
-					server->cursor->x, server->cursor->y, &surface, &sx, &sy);
-			if (view !=3D NULL) {
-				view_begin_interactive(view, surface, sx, sy,
-						"bottom_right_corner", INPUT_STATE_RESIZE_START);
-			} else {
-				view_end_interactive(server);
-			}
+		if (event->state !=3D WLR_BUTTON_PRESSED) {
+			break;
+		}
+		view =3D wio_view_at(server, server->cursor->x, server->cursor->y, &su=
rface, &sx, &sy);
+		if (view !=3D NULL) {
+			view_begin_interactive(view, surface, sx, sy,
+					"bottom_right_corner", INPUT_STATE_RESIZE_START);
+		} else {
+			view_end_interactive(server);
 		}
 		break;
 	case INPUT_STATE_RESIZE_START:
-		if (event->state =3D=3D WLR_BUTTON_PRESSED) {
-			server->interactive.sx =3D server->cursor->x;
-			server->interactive.sy =3D server->cursor->y;
-			server->input_state =3D INPUT_STATE_RESIZE_END;
+		if (event->state !=3D WLR_BUTTON_PRESSED) {
+			break;
 		}
+		server->interactive.sx =3D server->cursor->x;
+		server->interactive.sy =3D server->cursor->y;
+		server->input_state =3D INPUT_STATE_RESIZE_END;
 		break;
 	case INPUT_STATE_BORDER_DRAG:
 		box =3D which_box(server);
@@ -387,17 +370,15 @@ static void handle_button_internal(
 		view_end_interactive(server);
 		break;
 	case INPUT_STATE_MOVE_SELECT:
-		if (event->state =3D=3D WLR_BUTTON_PRESSED) {
-			double sx, sy;
-			struct wlr_surface *surface =3D NULL;
-			struct wio_view *view =3D wio_view_at(server,
-					server->cursor->x, server->cursor->y, &surface, &sx, &sy);
-			if (view !=3D NULL) {
-				view_begin_interactive(view, surface, sx, sy,
-						"grabbing", INPUT_STATE_MOVE);
-			} else {
-				view_end_interactive(server);
-			}
+		if (event->state !=3D WLR_BUTTON_PRESSED) {
+			break;
+		}
+		view =3D wio_view_at(server, server->cursor->x, server->cursor->y, &su=
rface, &sx, &sy);
+		if (view !=3D NULL) {
+			view_begin_interactive(view, surface, sx, sy,
+					"grabbing", INPUT_STATE_MOVE);
+		} else {
+			view_end_interactive(server);
 		}
 		break;
 	case INPUT_STATE_MOVE:
@@ -407,16 +388,14 @@ static void handle_button_internal(
 		view_end_interactive(server);
 		break;
 	case INPUT_STATE_DELETE_SELECT:
-		if (event->state =3D=3D WLR_BUTTON_PRESSED) {
-			double sx, sy;
-			struct wlr_surface *surface =3D NULL;
-			struct wio_view *view =3D wio_view_at(server,
-					server->cursor->x, server->cursor->y, &surface, &sx, &sy);
-			if (view !=3D NULL) {
-				wlr_xdg_toplevel_send_close(view->xdg_surface);
-			}
-			view_end_interactive(server);
+		if (event->state !=3D WLR_BUTTON_PRESSED) {
+			break;
 		}
+		view =3D wio_view_at(server, server->cursor->x, server->cursor->y, &su=
rface, &sx, &sy);
+		if (view !=3D NULL) {
+			wlr_xdg_toplevel_send_close(view->xdg_surface);
+		}
+		view_end_interactive(server);
 		break;
 	default:
 		// TODO
@@ -435,6 +414,10 @@ void server_cursor_button(struct wl_listener *listen=
er, void *data) {
 		view =3D wio_view_at(server, server->cursor->x, server->cursor->y, &su=
rface, &sx, &sy);
 	}
 	if (!view) {
+		if (event->state =3D=3D WLR_BUTTON_PRESSED && event->button !=3D BTN_R=
IGHT) {
+			view_end_interactive(server);
+			return;
+		}
 		handle_button_internal(server, event);
 		return;
 	}
--=20