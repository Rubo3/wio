From: Leonid Bobrov <goleo@disroot.org>
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=disroot.org; s=mail;
	t=1592466141; bh=z3Gw05juOFUpCV8+73nVVb7wnIu+yB70/4B4IkOXsPM=;
	h=From:To:Cc:Subject:Date:In-Reply-To:References;
	b=F6uLrDAvxJf1a1NeiKbLVSSvgmOc90TWOg3EVfEITcLYp3Hk4j50fcMylWLnWYEEY
	 KY7WHUBijLv8E8bKR9nw1DLgXpqP+MqbHwQlff1h5p1wGYbIrSzxyFJsVfALl6DdxB
	 iZYKEsDhWmw/ylQ7TjEoTK7hRQFUsVk0oPKCvxLrsIO4hw10PJVmmBe2cQYTvVxEVC
	 1cq6mOjiR2KMl/p3PsdFiA8Tvi/pMr5gFuzubMPVDBo+chUEEHvTIlVzOBzbAwwrRd
	 WCYozJnRby2rW+wf3Fpf7Iru3qmh02aKTR9O4bhlxQ9xKDRb++eWwkpzWX0nNOgR33
	 kYfFyoRs/PzBQ==
To: ~sircmpwn/wio@lists.sr.ht,
	Leon Plickat <leonhenrik.plickat@stud.uni-goetttingen.de>
Cc: Leonid Bobrov <goleo@disroot.org>
Subject: [PATCH 03/11] Don't mutate views when input state is active
Date: Thu, 18 Jun 2020 10:39:46 +0300
Message-Id: <20200618073954.189606-4-goleo@disroot.org>
In-Reply-To: <20200618073954.189606-1-goleo@disroot.org>
References: <20200618073954.189606-1-goleo@disroot.org>
Mime-Version: 1.0
Content-Transfer-Encoding: quoted-printable

---
 input.c | 102 +++++++++++++++++++++++++++++---------------------------
 1 file changed, 53 insertions(+), 49 deletions(-)

diff --git a/input.c b/input.c
index 8f7b31e..c5b25d9 100644
--- a/input.c
+++ b/input.c
@@ -122,42 +122,44 @@ static void process_cursor_motion(struct wio_server=
 *server, uint32_t time) {
 	struct wlr_seat *seat =3D server->seat;
 	struct wlr_surface *surface =3D NULL;
 	struct wio_view *view =3D NULL;
-	if (server->input_state !=3D INPUT_STATE_BORDER_DRAG) {
+	if (server->input_state =3D=3D INPUT_STATE_NONE) {
 		view =3D wio_view_at(server, server->cursor->x, server->cursor->y, &su=
rface, &sx, &sy);
 	}
-	if (!view) {
-		switch (server->input_state) {
-		case INPUT_STATE_MOVE_SELECT:
-		case INPUT_STATE_RESIZE_SELECT:
-		case INPUT_STATE_DELETE_SELECT:
-		case INPUT_STATE_HIDE_SELECT:
-			wlr_xcursor_manager_set_cursor_image(server->cursor_mgr,
-					"hand1", server->cursor);
-			break;
-		case INPUT_STATE_MOVE:
-			wlr_xcursor_manager_set_cursor_image(server->cursor_mgr,
-					"grabbing", server->cursor);
-			break;
-		case INPUT_STATE_BORDER_DRAG:
-			wlr_xcursor_manager_set_cursor_image(server->cursor_mgr,
-					corner, server->cursor);
-			break;
-		case INPUT_STATE_RESIZE_START:
-		case INPUT_STATE_NEW_START:
-			wlr_xcursor_manager_set_cursor_image(server->cursor_mgr,
-					"top_left_corner", server->cursor);
-			break;
-		case INPUT_STATE_RESIZE_END:
-		case INPUT_STATE_NEW_END:
-			wlr_xcursor_manager_set_cursor_image(server->cursor_mgr,
-					"bottom_right_corner", server->cursor);
-			break;
-		default:
-			wlr_xcursor_manager_set_cursor_image(server->cursor_mgr,
-					"left_ptr", server->cursor);
-			break;
-		}
+	if (view) {
+		goto End;
+	}
+	switch (server->input_state) {
+	case INPUT_STATE_MOVE_SELECT:
+	case INPUT_STATE_RESIZE_SELECT:
+	case INPUT_STATE_DELETE_SELECT:
+	case INPUT_STATE_HIDE_SELECT:
+		wlr_xcursor_manager_set_cursor_image(server->cursor_mgr,
+				"hand1", server->cursor);
+		break;
+	case INPUT_STATE_MOVE:
+		wlr_xcursor_manager_set_cursor_image(server->cursor_mgr,
+				"grabbing", server->cursor);
+		break;
+	case INPUT_STATE_BORDER_DRAG:
+		wlr_xcursor_manager_set_cursor_image(server->cursor_mgr,
+				corner, server->cursor);
+		break;
+	case INPUT_STATE_RESIZE_START:
+	case INPUT_STATE_NEW_START:
+		wlr_xcursor_manager_set_cursor_image(server->cursor_mgr,
+				"top_left_corner", server->cursor);
+		break;
+	case INPUT_STATE_RESIZE_END:
+	case INPUT_STATE_NEW_END:
+		wlr_xcursor_manager_set_cursor_image(server->cursor_mgr,
+				"bottom_right_corner", server->cursor);
+		break;
+	default:
+		wlr_xcursor_manager_set_cursor_image(server->cursor_mgr,
+				"left_ptr", server->cursor);
+		break;
 	}
+End:
 	if (surface) {
 		bool focus_changed =3D seat->pointer_state.focused_surface !=3D surfac=
e;
 		wlr_seat_pointer_notify_enter(seat, surface, sx, sy);
@@ -428,23 +430,25 @@ void server_cursor_button(struct wl_listener *liste=
ner, void *data) {
 	struct wlr_event_pointer_button *event =3D data;
 	double sx, sy;
 	struct wlr_surface *surface =3D NULL;
-	struct wio_view *view =3D wio_view_at(
-			server, server->cursor->x, server->cursor->y, &surface, &sx, &sy);
-	if (server->input_state =3D=3D INPUT_STATE_NONE && view) {
-		wio_view_focus(view, surface);
-		switch (view->area) {
-		case VIEW_AREA_SURFACE:
-			wlr_seat_pointer_notify_button(server->seat,
-					event->time_msec, event->button, event->state);
-			break;
-		default:
-			corner =3D corners[view->area];
-			view_begin_interactive(view, surface, view->x, view->y,
-					corner, INPUT_STATE_BORDER_DRAG);
-			break;
-		}
-	} else {
+	struct wio_view *view =3D NULL;
+	if (server->input_state =3D=3D INPUT_STATE_NONE) {
+		view =3D wio_view_at(server, server->cursor->x, server->cursor->y, &su=
rface, &sx, &sy);
+	}
+	if (!view) {
 		handle_button_internal(server, event);
+		return;
+	}
+	wio_view_focus(view, surface);
+	switch (view->area) {
+	case VIEW_AREA_SURFACE:
+		wlr_seat_pointer_notify_button(server->seat,
+				event->time_msec, event->button, event->state);
+		break;
+	default:
+		corner =3D corners[view->area];
+		view_begin_interactive(view, surface, view->x, view->y,
+				corner, INPUT_STATE_BORDER_DRAG);
+		break;
 	}
 }
=20
--=20